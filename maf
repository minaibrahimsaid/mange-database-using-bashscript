#!/bin/bash
app_path=`which maf | rev | cut -d/ -f2- | rev`
cd $app_path
PATH="$PATH:$HOME/repositories/mange-database-using-bashscript/scripts"
PATH="$PATH:$HOME/repositories/mange-database-using-bashscript/scripts/create"
PATH="$PATH:$HOME/repositories/mange-database-using-bashscript/scripts/drop"
if [ $# -eq 0 ]
  then
	echo "no user"
	exit 1
elif [[ `egrep :$1: ./system/passwd` ]]; then
		user_login $1

fi

# trap cleanup 20 2
# cleanup(){
#   echo "\n you can not exit to quit enter exit  "
 
# }

prep_create(){
	#echo -n "" > ./tmp/table
	line=`echo $line | cut -d "(" -f 2`
	line=$(echo -n $line | head -c -1)
	echo $line | tr ',' '\n' > ./tmp/table 
}

prep_alter(){
	#echo -n "" > ./tmp/table
	line=`echo $line | cut -d " " -f5-`
	echo $line | tr ' ' '\n' > ./tmp/table 
}

prep_insert(){
	#echo -n "" > ./tmp/table
	line=`echo $line | cut -d "(" -f 2`
	line=$(echo -n $line | head -c -1)
	echo $line | tr ',' '\n' > ./tmp/table 
}

prog_switch (){

	case $com in 
		show)
			show `echo $line | cut -d " " -f2`
			;;
		create)
			targ=`echo $line | cut -d " " -f2`
			case $targ in 
				database )
					create_db `echo $line | cut -d " " -f3` `echo $line | cut -d " " -f4`
					;;
				table )
					# table `echo $line | cut -d " " -f3`
					prep_line=$line
					prep_create $line
					create_table `echo $prep_line | cut -d " " -f3`
					
					;;
				* )
					echo -4 #command not found
		esac
		;;
	     drop)
			targ=`echo $line | cut -d " " -f2`
			case $targ in 
				database )
					drop_db `echo $line | cut -d " " -f3`
					;;
				table )
					drop_table `echo $line | cut -d " " -f3`
					
					;;
				* )
					echo -4 #command not found
		esac
		;;
		use)
			use `echo $line | cut -d " " -f2`
		;;
		desc)
			desc `echo $line | cut -d " " -f2`
		;;
		logout)
			user_logout
			exit 1
			;;
		help)
			cat ./about/help
		;;
		insert)
		if [[ `echo $line | cut -d " " -f2`=="into" ]]
		then
			prep_line=$line
			prep_insert $line
			insert `echo $prep_line | cut -d " " -f3` 
		else

		echo -4

		fi

		;;
		sort)
		if [[ `echo $line | cut -d " " -f3`=="by" ]]
			then
			sor `echo $line | cut -d " " -f2` `echo $line | cut -d " " -f4` `echo $line | cut -d " " -f5`
		else

		echo -4

		fi
		;;
		alter) #ALTER TABLE `opensource_student` CHANGE `id` `iid`
		#ALTER TABLE `opensource_student` ADD `mina` INT NOT NULL AFTER `track_id`;
		#ALTER TABLE `opensource_student` DROP `track_id`;" 
		mod=`echo $line | cut -d " " -f4`
		case $mod in
			name)
				prep_line=$line
				prep_alter $line
				name `echo $prep_line | cut -d " " -f3` 
				;;
			set)
				change `echo $line | cut -d " " -f3,5,6` 
				;;
			add)
				add_column `echo $line | cut -d " " -f3,5,6`
				;;
			drop)
			;;
			*)
			echo -4
		esac
		;;
		*)
		echo -4 #"error command undefined $com"
		;;
		
		esac
		
}



while [[ 1 ]] 
do
	user_id=`egrep ^[0-9]+: ./system/session | cut -d ":" -f1`
	user=`egrep ^$user_id: ./system/passwd | cut -d ":" -f2`
	db=`cat ./system/session | cut -d : -f2`	
	read -p "${user}@${db} >" choose

case $choose in


    q)
		echo "bye "
		user_logout
		break
        ;;
    *)
        
		 if [[ `echo -n $choose | tail -c 1 ` != \; ]]
		 	then
		 		line="${line} ${choose}"
	 		else
	 			ch=$(echo -n $choose | head -c -1)
	 			line="${line} ${ch}"
	 			com=`echo $line | cut -d " " -f1`
	 			prog_switch $com $line
	 			line=""
		 fi
		;;
esac
done